name: Deploy to Prod

on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: us-east1
  SERVICE_NAME: api-restaurant-prod
  IMAGE_TAG: ${{ github.sha }}
  CREDENTIALS_FILE: /tmp/gcp-credentials.json

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.set-output.outputs.image_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode and Save GCP Credentials
        run: |
          echo '${{ secrets.GCP_SA_KEY_B64 }}' | base64 -d > ${{ env.CREDENTIALS_FILE }}

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_file_path: ${{ env.CREDENTIALS_FILE }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Set output image URL
        id: set-output
        run: |
          echo "image_url=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Cleanup Credentials
        if: always()
        run: rm -f ${{ env.CREDENTIALS_FILE }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode and Save GCP Credentials
        run: |
          echo '${{ secrets.GCP_SA_KEY_B64 }}' | base64 -d > ${{ env.CREDENTIALS_FILE }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./infrastructure/prod
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.CREDENTIALS_FILE }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/prod
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.CREDENTIALS_FILE }}
        run: |
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="image_url=${{ needs.build-and-push.outputs.image_url }}"

      - name: Terraform Apply
        working-directory: ./infrastructure/prod
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.CREDENTIALS_FILE }}
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="image_url=${{ needs.build-and-push.outputs.image_url }}"

      - name: Get Cloud Run URL
        id: get-url
        working-directory: ./infra/prod
        run: |
          SERVICE_URL=$(terraform output -raw service_url)
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Cleanup Credentials
        if: always()
        run: rm -f ${{ env.CREDENTIALS_FILE }}

  notify-fail:
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-push, deploy]
    steps:
      - name: Generate Action Link
        run: |
          ACTION_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "ACTION_LINK=$ACTION_LINK" >> $GITHUB_ENV

      - name: üì£ Fail discord notification
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          username: 'Github Actions'
          avatar-url: 'https://cdn-icons-png.flaticon.com/512/7717/7717267.png'
          embed-title: 'Deploy PROD'
          embed-description: '‚ùå Falha ao fazer deploy da api em PROD!'
          embed-color: 14553088
          embed-thumbnail-url: 'https://e7.pngegg.com/pngimages/834/472/png-clipart-google-cloud-icon-google-cloud-platform-cloud-computing-amazon-web-services-virtual-private-cloud-cloud-computing-text-trademark.png'
          embed-author-name: 'Github Actions'
          embed-author-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
          embed-footer-text: 'URL da execu√ß√£o: ${{ env.ACTION_LINK }}'
          embed-footer-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'

  notify-success:
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-push, deploy]
    steps:
      - name: üì£ Success discord notification
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          username: 'Github Actions'
          avatar-url: 'https://cdn-icons-png.flaticon.com/512/7717/7717267.png'
          embed-title: 'Deploy PROD'
          embed-description: '‚úÖ O Deploy da api em PROD foi realizado com sucesso!'
          embed-color: 2067276
          embed-thumbnail-url: 'https://e7.pngegg.com/pngimages/834/472/png-clipart-google-cloud-icon-google-cloud-platform-cloud-computing-amazon-web-services-virtual-private-cloud-cloud-computing-text-trademark.png'
          embed-author-name: 'Github Actions'
          embed-author-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
          embed-footer-text: 'URL da api: ${{ needs.deploy.outputs.service_url }}'
          embed-footer-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
