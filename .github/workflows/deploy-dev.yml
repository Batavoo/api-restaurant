name: Deploy to Dev

on:
  push:
    branches: [develop]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: us-east1
  REPOSITORY: trabalho-pos
  SERVICE_NAME: api-restaurant-dev
  IMAGE_TAG: ${{ github.sha }}
  CREDENTIALS_FILE: /tmp/gcp-credentials.json

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.set-output.outputs.image_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
          gcloud auth list

      - name: Create Repository if not exists
        run: |
          if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }} 2>/dev/null; then
            echo "Creating repository ${{ env.REPOSITORY }} in ${{ env.REGION }}..."
            gcloud artifacts repositories create ${{ env.REPOSITORY }} \
              --repository-format=docker \
              --location=${{ env.REGION }} \
              --description="Docker repository for API"
          else
            echo "Repository ${{ env.REPOSITORY }} already exists"
          fi

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Set output image URL
        id: set-output
        run: |
          echo "image_url=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Verify Image Push
        run: |
          gcloud artifacts docker images list ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}

      - name: Debug Output
        run: |
          echo "Outputs:"
          echo "image_url: ${{ steps.set-output.outputs.image_url }}"
          echo "GITHUB_OUTPUT: $GITHUB_OUTPUT"

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Needs Context
        run: |
          echo "Needs context:"
          echo "build-and-push result: ${{ needs.build-and-push.result }}"
          echo "build-and-push outputs: ${{ toJSON(needs.build-and-push.outputs) }}"

      - name: Save GCP Credentials
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > ${{ env.CREDENTIALS_FILE }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./infra/dev
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.CREDENTIALS_FILE }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infra/dev
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.CREDENTIALS_FILE }}
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="image_url=${{ needs.build-and-push.outputs.image_url }}"

      - name: Get Cloud Run URL
        id: get-url
        working-directory: ./infra/dev
        run: |
          SERVICE_URL=$(terraform output -raw service_url)
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Cleanup Credentials
        if: always()
        run: rm -f ${{ env.CREDENTIALS_FILE }}

  # notify-fail:
  #   runs-on: ubuntu-latest
  #   if: failure()
  #   needs: [build-and-push, deploy]
  #   steps:
  #     - name: Generate Action Link
  #       run: |
  #         ACTION_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #         echo "ACTION_LINK=$ACTION_LINK" >> $GITHUB_ENV
  #
  #     - name: üì£ Fail discord notification
  #       uses: tsickert/discord-webhook@v5.3.0
  #       with:
  #         webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
  #         username: 'Github Actions'
  #         avatar-url: 'https://cdn-icons-png.flaticon.com/512/7717/7717267.png'
  #         embed-title: 'Deploy DEV'
  #         embed-description: '‚ùå Falha ao fazer deploy da api em DEV!'
  #         embed-color: 14553088
  #         embed-thumbnail-url: 'https://e7.pngegg.com/pngimages/834/472/png-clipart-google-cloud-icon-google-cloud-platform-cloud-computing-amazon-web-services-virtual-private-cloud-cloud-computing-text-trademark.png'
  #         embed-author-name: 'Github Actions'
  #         embed-author-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
  #         embed-footer-text: 'URL da execu√ß√£o: ${{ env.ACTION_LINK }}'
  #         embed-footer-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
  #
  # notify-success:
  #   runs-on: ubuntu-latest
  #   if: success()
  #   needs: [build-and-push, deploy]
  #   steps:
  #     - name: üì£ Success discord notification
  #       uses: tsickert/discord-webhook@v5.3.0
  #       with:
  #         webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
  #         username: 'Github Actions'
  #         avatar-url: 'https://cdn-icons-png.flaticon.com/512/7717/7717267.png'
  #         embed-title: 'Deploy DEV'
  #         embed-description: '‚úÖ O Deploy da api em DEV foi realizado com sucesso!'
  #         embed-color: 2067276
  #         embed-thumbnail-url: 'https://e7.pngegg.com/pngimages/834/472/png-clipart-google-cloud-icon-google-cloud-platform-cloud-computing-amazon-web-services-virtual-private-cloud-cloud-computing-text-trademark.png'
  #         embed-author-name: 'Github Actions'
  #         embed-author-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
  #         embed-footer-text: 'URL da api: ${{ needs.deploy.outputs.service_url }}'
  #         embed-footer-icon-url: 'https://cdn-icons-png.flaticon.com/512/25/25231.png'
